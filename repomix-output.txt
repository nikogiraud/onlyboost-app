This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-04-02T09:44:31.335Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
gradle/
  wrapper/
    gradle-wrapper.properties
  libs.versions.toml
OnlyBoostAndroid/
  src/
    main/
      java/
        com/
          onlyboost/
            onlyboost/
              android/
                MainActivity.kt
                MyApplicationTheme.kt
      res/
        values/
          styles.xml
      AndroidManifest.xml
  build.gradle.kts
OnlyBoostiOS/
  OnlyBoostiOS/
    Assets.xcassets/
      AccentColor.colorset/
        Contents.json
      AppIcon.appiconset/
        Contents.json
      apple.imageset/
        Contents.json
      google.imageset/
        Contents.json
      mainBackground.colorset/
        Contents.json
      microsoft.imageset/
        Contents.json
      Contents.json
    Preview Content/
      Preview Assets.xcassets/
        Contents.json
    AnimatedButton.swift
    AuthorizationWebView.swift
    CarouselView.swift
    ContentView.swift
    DescriptionSheet.swift
    DetailView.swift
    GalleryContainerView.swift
    GalleryHostView.swift
    GlassView.swift
    GuestFlowUpload.swift
    ImageGalleryCell.swift
    ImageGalleryCollectionView.swift
    ImageLoader.swift
    Info.plist
    iOSApp.swift
    LoopingGradientView.swift
    PreferenceKeys.swift
    SchedulePostsSheet.swift
    SegmentedControl.swift
    SignUpPopup.swift
    SubredditsSheet.swift
    TestAsync.swift
    UploadPhoto.swift
  OnlyBoostiOS.xcodeproj/
    project.xcworkspace/
      contents.xcworkspacedata
    xcshareddata/
      xcschemes/
        OnlyBoostiOS.xcscheme
    project.pbxproj
shared/
  src/
    androidMain/
      kotlin/
        com/
          onlyboost/
            onlyboost/
              Platform.android.kt
    commonMain/
      kotlin/
        com/
          onlyboost/
            onlyboost/
              EnvironmentConfiguration.kt
              Greeting.kt
              Networking.kt
              Platform.kt
    iosMain/
      kotlin/
        com/
          onlyboost/
            onlyboost/
              Platform.ios.kt
  build.gradle.kts
.gitignore
build.gradle.kts
gradle.properties
gradlew
gradlew.bat
settings.gradle.kts

================================================================
Files
================================================================

================
File: gradle/wrapper/gradle-wrapper.properties
================
#Mon Mar 17 19:20:54 EDT 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.11.1-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

================
File: gradle/libs.versions.toml
================
[versions]
agp = "8.9.0"
kotlin = "2.1.10"
compose = "1.5.4"
compose-material3 = "1.1.2"
androidx-activityCompose = "1.8.0"
ktor = "3.1.1"
coroutines = "1.9.0"

[libraries]
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
compose-ui = { module = "androidx.compose.ui:ui", version.ref = "compose" }
compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose" }
compose-ui-tooling-preview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "compose" }
compose-foundation = { module = "androidx.compose.foundation:foundation", version.ref = "compose" }
compose-material3 = { module = "androidx.compose.material3:material3", version.ref = "compose-material3" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" }

[plugins]
androidApplication = { id = "com.android.application", version.ref = "agp" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
kotlinAndroid = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlinCocoapods = { id = "org.jetbrains.kotlin.native.cocoapods", version.ref = "kotlin" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }

================
File: OnlyBoostAndroid/src/main/java/com/onlyboost/onlyboost/android/MainActivity.kt
================
package com.onlyboost.onlyboost.android

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.onlyboost.onlyboost.Greeting

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MyApplicationTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    GreetingView(Greeting().greet())
                }
            }
        }
    }
}

@Composable
fun GreetingView(text: String) {
    Text(text = text)
}

@Preview
@Composable
fun DefaultPreview() {
    MyApplicationTheme {
        GreetingView("Hello, Android!")
    }
}

================
File: OnlyBoostAndroid/src/main/java/com/onlyboost/onlyboost/android/MyApplicationTheme.kt
================
package com.onlyboost.onlyboost.android

import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Shapes
import androidx.compose.material3.Typography
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun MyApplicationTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    content: @Composable () -> Unit
) {
    val colors = if (darkTheme) {
        darkColorScheme(
            primary = Color(0xFFBB86FC),
            secondary = Color(0xFF03DAC5),
            tertiary = Color(0xFF3700B3)
        )
    } else {
        lightColorScheme(
            primary = Color(0xFF6200EE),
            secondary = Color(0xFF03DAC5),
            tertiary = Color(0xFF3700B3)
        )
    }
    val typography = Typography(
        bodyMedium = TextStyle(
            fontFamily = FontFamily.Default,
            fontWeight = FontWeight.Normal,
            fontSize = 16.sp
        )
    )
    val shapes = Shapes(
        small = RoundedCornerShape(4.dp),
        medium = RoundedCornerShape(4.dp),
        large = RoundedCornerShape(0.dp)
    )

    MaterialTheme(
        colorScheme = colors,
        typography = typography,
        shapes = shapes,
        content = content
    )
}

================
File: OnlyBoostAndroid/src/main/res/values/styles.xml
================
<resources>
    <style name="AppTheme" parent="android:Theme.Material.NoActionBar"/>
</resources>

================
File: OnlyBoostAndroid/src/main/AndroidManifest.xml
================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <application
        android:allowBackup="false"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>
</manifest>

================
File: OnlyBoostAndroid/build.gradle.kts
================
plugins {
    alias(libs.plugins.androidApplication)
    alias(libs.plugins.kotlinAndroid)
    alias(libs.plugins.compose.compiler)
}

android {
    namespace = "com.onlyboost.onlyboost.android"
    compileSdk = 35
    defaultConfig {
        applicationId = "com.onlyboost.onlyboost.android"
        minSdk = 33
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"
    }
    buildFeatures {
        compose = true
    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
    buildTypes {
        getByName("release") {
            isMinifyEnabled = false
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation(projects.shared)
    implementation(libs.compose.ui)
    implementation(libs.compose.ui.tooling.preview)
    implementation(libs.compose.material3)
    implementation(libs.androidx.activity.compose)
    debugImplementation(libs.compose.ui.tooling)
    implementation(libs.kotlinx.coroutines.android)
}

================
File: OnlyBoostiOS/OnlyBoostiOS/Assets.xcassets/AccentColor.colorset/Contents.json
================
{
  "colors" : [
    {
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/Assets.xcassets/AppIcon.appiconset/Contents.json
================
{
  "images" : [
    {
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "20x20"
    },
    {
      "idiom" : "iphone",
      "scale" : "3x",
      "size" : "20x20"
    },
    {
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "29x29"
    },
    {
      "idiom" : "iphone",
      "scale" : "3x",
      "size" : "29x29"
    },
    {
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "40x40"
    },
    {
      "idiom" : "iphone",
      "scale" : "3x",
      "size" : "40x40"
    },
    {
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "60x60"
    },
    {
      "idiom" : "iphone",
      "scale" : "3x",
      "size" : "60x60"
    },
    {
      "idiom" : "ipad",
      "scale" : "1x",
      "size" : "20x20"
    },
    {
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "20x20"
    },
    {
      "idiom" : "ipad",
      "scale" : "1x",
      "size" : "29x29"
    },
    {
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "29x29"
    },
    {
      "idiom" : "ipad",
      "scale" : "1x",
      "size" : "40x40"
    },
    {
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "40x40"
    },
    {
      "idiom" : "ipad",
      "scale" : "1x",
      "size" : "76x76"
    },
    {
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "76x76"
    },
    {
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "83.5x83.5"
    },
    {
      "idiom" : "ios-marketing",
      "scale" : "1x",
      "size" : "1024x1024"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/Assets.xcassets/apple.imageset/Contents.json
================
{
  "images" : [
    {
      "filename" : "icons8-apple.pdf",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  },
  "properties" : {
    "preserves-vector-representation" : true
  }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/Assets.xcassets/google.imageset/Contents.json
================
{
  "images" : [
    {
      "filename" : "icons8-google.pdf",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  },
  "properties" : {
    "preserves-vector-representation" : true
  }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/Assets.xcassets/mainBackground.colorset/Contents.json
================
{
  "colors" : [
    {
      "color" : {
        "color-space" : "srgb",
        "components" : {
          "alpha" : "1.000",
          "blue" : "41",
          "green" : "23",
          "red" : "14"
        }
      },
      "idiom" : "universal"
    },
    {
      "appearances" : [
        {
          "appearance" : "luminosity",
          "value" : "dark"
        }
      ],
      "color" : {
        "color-space" : "srgb",
        "components" : {
          "alpha" : "1.000",
          "blue" : "41",
          "green" : "23",
          "red" : "14"
        }
      },
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/Assets.xcassets/microsoft.imageset/Contents.json
================
{
  "images" : [
    {
      "filename" : "icons8-microsoft.pdf",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  },
  "properties" : {
    "preserves-vector-representation" : true
  }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/Assets.xcassets/Contents.json
================
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/Preview Content/Preview Assets.xcassets/Contents.json
================
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/AnimatedButton.swift
================
//
//  AnimatedButton.swift
//  OnlyBoostiOS
//
//  Created by Niko Giraud on 3/21/25.
//  Copyright © 2025 orgName. All rights reserved.
//

import SwiftUI

struct AnimatedButton: View {
//    @State private var isTapped = false
    
    var body: some View {
        Button(action: {
//            // Trigger the pressed effect
//            withAnimation(.easeOut(duration: 0.1)) {
//                isTapped = true
//            }
//            // Reset after a short delay
//            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
//                withAnimation(.easeIn(duration: 0.1)) {
//                    isTapped = false
//                }
//            }
            print("Button tapped!") // Your action here
        }) {
            Text("Tap Me")
                .font(.headline)
                .padding()
                .background(Color.blue)
                .foregroundColor(.white)
                .cornerRadius(10)
        }
    }
}

struct AnimatedButton_Previews: PreviewProvider {
    static var previews: some View {
        AnimatedButton()
    }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/AuthorizationWebView.swift
================
//
//  AuthorizationWebView.swift
//  OnlyBoostiOS
//
//  Created by Niko Giraud on 3/19/25.
//  Copyright © 2025 orgName. All rights reserved.
//


import SwiftUI
import UIKit
@preconcurrency import WebKit
import shared

struct AuthorizationWebView: UIViewRepresentable {
    let urlPath: String
    let notFoundURL: URL = URL(string: Networking.Paths().notFound())!
    let onSessionTokenReceived: (String) -> Void // Callback closure
    let loginFailed: (String?) -> Void
    
    func makeUIView(context: Context) -> WKWebView {
        let config = WKWebViewConfiguration()
        config.websiteDataStore = WKWebsiteDataStore.nonPersistent()
        let webView = WKWebView(frame: .zero, configuration: config)
        webView.navigationDelegate = context.coordinator
        webView.allowsBackForwardNavigationGestures = true
        webView.customUserAgent = "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Mobile Safari/537.36"
        return webView
    }

    func updateUIView(_ uiView: WKWebView, context: Context) {
        let url = URL(string: urlPath) ?? notFoundURL
        print(url.absoluteString)
        let request = URLRequest(url: url)
        uiView.load(request)
    }

    func makeCoordinator() -> Coordinator {
        Coordinator(onSessionTokenReceived: onSessionTokenReceived, loginFailed: loginFailed)
    }

    // MARK: - Coordinator Class
    class Coordinator: NSObject, WKNavigationDelegate {
        let onSessionTokenReceived: (String) -> Void
        let loginFailed: (String?) -> Void

        init(onSessionTokenReceived: @escaping (String) -> Void, loginFailed: @escaping (String?) -> Void) {
            self.onSessionTokenReceived = onSessionTokenReceived
            self.loginFailed = loginFailed
        }

        // WKNavigationDelegate method to decide policy for navigation action
        func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction,
                     decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
            guard let url = webView.url else {
                decisionHandler(.cancel)
                // dismiss the webview here
                return
            }
            
            
            if(EnvironmentConfiguration().environmentType == EnvironmentConfiguration.Types.dev) {
                if(url.absoluteString.starts(with: EnvironmentConfiguration().callbackOrigin)) {
                    let updatedString = url.absoluteString.replacing(EnvironmentConfiguration().callbackOrigin,
                                                                     with: EnvironmentConfiguration().apiOrigin)
                    guard let newURL = URL(string: updatedString) else {
                        decisionHandler(.cancel)
                        // dismiss the webview here
                        return
                    }
                    let request = URLRequest(url: newURL)
                    webView.load(request)
                    decisionHandler(.allow)
                    return
                }
            }
            
            if url.absoluteString.starts(with: Networking.Paths().authorizationSuccessStart()),
                           let components = URLComponents(url: url, resolvingAgainstBaseURL: false),
                           let queryItems = components.queryItems,
                           let sessionToken = queryItems.first(where: { $0.name == "sessionToken" })?.value {
                            onSessionTokenReceived(sessionToken)
            } else if url.absoluteString.starts(with: Networking.Paths().authorizationFailureStart()) {
                // Error description can be nil
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                let queryItems = components?.queryItems
                let error_description = queryItems?.first(where: { $0.name == "error_description" })?.value
                loginFailed(error_description)
            }
                
            decisionHandler(.allow)
        }
    }
    
    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        if let currentURL = webView.url {
            print("Finished loading URL: \(currentURL.absoluteString)")
        }
    }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/CarouselView.swift
================
import SwiftUI

struct CarouselView: View {
    @State private var activeIndex = 0
    @State private var showSubreddits = false
    @State private var subredditOpacity: Double = 0.0 // Start at 0 for fade-in
    @State private var isDragging = false
    
    let images = [
        "https://i.imgur.com/XyvrE7X.png",
        "https://placehold.co/300x400/blue/yellow?text=Image2",
        "https://placehold.co/300x400/green/black?text=Image3",
        "https://placehold.co/300x400/purple/white?text=Image4",
        "https://placehold.co/300x400/orange/black?text=Image5"
    ]
    
    let subredditLists: [[String]] = [
        ["r/red", "r/warm", "r/bold"],
        ["r/blue", "r/cool", "r/calm"],
        ["r/green", "r/nature", "r/fresh"],
        ["r/purple", "r/royal", "r/mysterious"],
        ["r/orange", "r/vibrant", "r/energetic"]
    ]
    
    let timer = Timer.publish(every: 5, on: .main, in: .common).autoconnect()

    var body: some View {
        VStack(spacing: 20) {
            ImageCarousel(activeIndex: $activeIndex, images: images)
                .frame(height: 400)
                .clipped()
            
            if showSubreddits {
                SubredditList(subreddits: subredditLists[activeIndex])
                    .opacity(subredditOpacity) // Apply opacity here
            }
        }
        .onChange(of: showSubreddits) { newValue in
            withAnimation(.easeInOut(duration: 0.5)) {
                subredditOpacity = newValue ? 1.0 : 0.0 // Fade in or out
            }
        }
        .onReceive(timer) { _ in
            if !isDragging { autoSlide() }
        }
        .onAppear {
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
                withAnimation(.easeInOut(duration: 0.5)) {
                    showSubreddits = true // Trigger initial fade-in
                }
            }
        }
    }

    private func autoSlide() {
        withAnimation(.easeInOut(duration: 0.5)) {
            showSubreddits = false // Fade out
        }
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            withAnimation(.easeInOut(duration: 0.8)) {
                activeIndex = (activeIndex + 1) % images.count // Slide image
            }
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.8) {
                withAnimation(.easeInOut(duration: 0.5)) {
                    showSubreddits = true // Fade in new list
                }
            }
        }
    }
}

// Supporting views remain unchanged
struct ImageCarousel: View {
    @Binding var activeIndex: Int
    let images: [String]

    var body: some View {
        TabView(selection: $activeIndex) {
            ForEach(0..<images.count, id: \.self) { index in
                AsyncImage(url: URL(string: images[index])) { image in
                    imageView(image, isActive: index == activeIndex)
                } placeholder: {
                    placeholderView
                }
                .frame(width: 200, height: 200)
                .tag(index)
                .padding(.horizontal, 10)
            }
        }
        .tabViewStyle(PageTabViewStyle(indexDisplayMode: .automatic))
        .animation(.easeInOut(duration: 0.8), value: activeIndex)
    }

    @ViewBuilder
    private func imageView(_ image: Image, isActive: Bool) -> some View {
        image
            .resizable()
            .aspectRatio(contentMode: .fill)
            .clipShape(RoundedRectangle(cornerRadius: 10))
            .opacity(isActive ? 1.0 : 0.7)
            .transition(.slide)
    }

    private var placeholderView: some View {
        Color.gray
            .frame(height: 400)
            .clipShape(RoundedRectangle(cornerRadius: 10))
    }
}

struct SubredditList: View {
    let subreddits: [String]

    var body: some View {
        HStack(alignment: .center, spacing: 20) {
            ForEach(subreddits, id: \.self) { subreddit in
                Text(subreddit)
                    .font(.custom("FugazOne-Regular", size: 16))
                    .foregroundColor(.white)
                    .padding(10)
                    .background(.purple.opacity(0.8))
                    .clipShape(RoundedRectangle(cornerRadius: 8))
            }
        }
        .border(.red, width: 1)
    }
}

extension Color {
    init(hex: UInt) {
        self.init(
            red: Double((hex >> 16) & 0xff) / 255,
            green: Double((hex >> 8) & 0xff) / 255,
            blue: Double(hex & 0xff) / 255
        )
    }
}

struct CarouselView_Previews: PreviewProvider {
    static var previews: some View {
        CarouselView()
    }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/ContentView.swift
================
import SwiftUI
import AVKit

struct ContentView: View {
    @State var player = AVPlayer(url: Bundle.main.url(forResource: "SpaceAnimation",
                                                      withExtension: "mp4")!)
    @State var isShowingGuestFlow = false
    var body: some View {
        NavigationStack {
            ZStack {
                VideoPlayer(player: player)
                    .aspectRatio(contentMode: .fill)
                    .ignoresSafeArea() // Extend to all edges, ignoring safe areas
                    .disabled(true)
                

                VStack {
                    Spacer()
                    Text("OnlyBoost")
                        .foregroundStyle(.white)
                        .font(Font.custom("FugazOne-Regular", size: 48))
                    GeometryReader { reader in
                        CarouselView()
                            .frame(width: reader.size.width)
                            .border(.red, width: 1)
                    }
                    Spacer()
                    
                    Button(action: {
                        print("Get Started ->") // Your action here
                    }) {
                        Text("Get Started")
                            .font(.headline)
                            .padding()
                            .background(Color.blue)
                            .foregroundColor(.white)
                            .cornerRadius(10)
                    }
                        
                    Spacer()
                        .frame(height: 24)
                    
                    Button {
                        print("Already Registered?")
                    } label: {
                        Text("Already Registered? Sign In")
                    }
                    Spacer()
                        .frame(height: 24)
                }
                .navigationDestination(isPresented: $isShowingGuestFlow, destination: {
                    UploadPhoto()
                })
            }
            .onAppear {
                setupPlayer()
            }
        }
    }
    
    func setupPlayer() {
        guard let duration = player.currentItem?.duration else { return }
        
        // Observer for forward playback reaching the end
        player.addBoundaryTimeObserver(forTimes: [NSValue(time: duration)], queue: .main) { [weak player] in
            guard let player = player else { return }
            player.rate = -1.0 // Switch to reverse
            
            // Observer for reverse reaching the start
            player.addBoundaryTimeObserver(forTimes: [NSValue(time: CMTime.zero)], queue: .main) { [weak player] in
                player?.pause()
                player?.seek(to: .zero) // Reset to start
            }
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/DescriptionSheet.swift
================
//
//  DescriptionSheet.swift
//  OnlyBoostiOS
//
//  Created by Niko Giraud on 3/24/25.
//  Copyright © 2025 orgName. All rights reserved.
//

import SwiftUI

struct DescriptionSheet: View {
    @EnvironmentObject var viewModel: AppViewModel

    @State private var tags: [String] = ["white", "brunette", "bikini", "beach", "thin"]
    @State private var newTag: String = ""
    @State private var showingSubredditsSheet = false

    var body: some View {
        NavigationView {
            VStack(alignment: .leading) {
                ScrollView {
                    LazyVGrid(columns: [GridItem(.adaptive(minimum: 80))], spacing: 10) {
                        ForEach(tags, id: \.self) { tag in
                            Text(tag)
                                .padding(5)
                                .foregroundStyle(Color.white)
                                .background(Color.blue)
                                .cornerRadius(5)
                        }
                    }
                }
                
                Text("Did we miss any?")
                    .font(.headline)
                    .foregroundStyle(.white)
                TextField("",
                          text: $newTag,
                          prompt: Text("Add new subreddit").foregroundStyle(.gray))
                .padding(10)
                .foregroundStyle(.white)
                .background(
                    RoundedRectangle(cornerRadius: 10)
                        .stroke(Color.gray, lineWidth: 1)
                )
                
                Spacer()
                    .frame(height: 20)
                
                Button("Find Subreddits") {
                    showingSubredditsSheet = true
                }
                .font(.headline)
                .padding()
                .frame(maxWidth: .infinity)
                .background {
                    LoopingGradientView(isAnimating: true)
                }
                .foregroundColor(.white)
                .cornerRadius(10)
                
                Spacer()
                    .frame(height: 20)
            }
            .padding()
            .toolbar {
                ToolbarItem(placement: .topBarLeading) {
                    Text("Image Captions")
                        .foregroundColor(.white)
                        .font(.largeTitle)
                        .fontWeight(.bold)
                }
            }
            .background(
                Color(.mainBackground)
                    .overlay {
                        GlassView()
                    }
                    .ignoresSafeArea()
            )
        }
        .sheet(isPresented: $showingSubredditsSheet) {
            SubredditsSheet(isPresented: $showingSubredditsSheet)
                .presentationDetents([.medium])
        }
    }
}

#Preview {
    DescriptionSheet()
}

================
File: OnlyBoostiOS/OnlyBoostiOS/DetailView.swift
================
import SwiftUI

struct DetailView: View {
    let imageUrl: String
    let schedules: [SubredditSchedule]

    private let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        formatter.timeStyle = .short
        return formatter
    }()

    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 20) {
                AsyncImage(url: URL(string: imageUrl)) { phase in
                    switch phase {
                    case .empty:
                        ProgressView()
                            .frame(maxWidth: .infinity, minHeight: 300)
                    case .success(let image):
                        image.resizable().scaledToFit()
                            .clipShape(RoundedRectangle(cornerRadius: 10))
                            .frame(maxWidth: .infinity)
                    case .failure:
                        Image(systemName: "photo.fill").resizable().scaledToFit()
                            .frame(maxWidth: .infinity, minHeight: 300).foregroundStyle(.gray)
                    @unknown default: EmptyView()
                    }
                }
                .padding(.horizontal)

                Divider().padding(.horizontal)

                if !schedules.isEmpty {
                    Text("Scheduled Posts")
                        .font(.title2).fontWeight(.semibold).padding(.horizontal)
                    VStack(spacing: 0) {
                        ForEach(schedules) { schedule in
                            SubredditScheduleRow(schedule: schedule, dateFormatter: dateFormatter)
                            Divider().padding(.leading, 60)
                        }
                    }
                } else {
                    Text("No posts scheduled for this image yet.")
                        .font(.caption).foregroundStyle(.secondary).padding(.horizontal)
                }
            }
            .padding(.vertical)
        }
        .navigationTitle("Image Detail")
        .navigationBarTitleDisplayMode(.inline)
    }
}

struct DetailView_Previews: PreviewProvider {
    static let previewSchedules: [SubredditSchedule] = [
        SubredditSchedule(subredditName: "r/DetailPreview", iconUrl: nil, scheduledDates: [
            ScheduledDate(date: Calendar.current.date(byAdding: .day, value: 1, to: Date())!),
            ScheduledDate(date: Calendar.current.date(byAdding: .day, value: 3, to: Date())!)
        ])
    ]

    static var previews: some View {
        NavigationView {
            DetailView(
                imageUrl: "https://i.imgur.com/3LWLaSL.png",
                schedules: previewSchedules
            )
        }

        NavigationView {
            DetailView(
                imageUrl: "https://i.imgur.com/6jTB0Cz.jpeg",
                schedules: []
            )
        }
        .preferredColorScheme(.dark)
    }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/GalleryContainerView.swift
================
import SwiftUI

struct GalleryContainerView: View {
    @State private var imageUrls: [String]
    @State private var tappedImageIndex: Int? = nil
    @State private var showDetailView = false

    var body: some View {
        NavigationView {
            VStack {
                ImageGalleryCollectionView(imageIdentifiers: imageUrls) { index in
                    print("Tapped image at index: \(index)")
                    self.tappedImageIndex = index
                    self.showDetailView = true
                }

                NavigationLink(
                    destination: DetailView(imageUrl: imageUrls[tappedImageIndex ?? 0]),
                    isActive: $showDetailView
                ) {
                    EmptyView()
                }
            }
            .navigationTitle("Gallery")
        }
    }
}

struct DetailView: View {
    let imageUrl: String

    var body: some View {
        VStack {
            Text("Detail View")
            Text("Showing image from URL:")
            Text(imageUrl).font(.caption)
            Spacer()
        }
        .navigationTitle("Image Detail")
    }
}

struct GalleryContainerView_Previews: PreviewProvider {
    static var previews: some View {
        let imageURLs = [
            "https://i.imgur.com/3LWLaSL.png",
            "https://i.imgur.com/6jTB0Cz.jpeg",
            "https://i.imgur.com/3LWLaSL.png",
            "https://i.imgur.com/6jTB0Cz.jpeg",
            "https://i.imgur.com/3LWLaSL.png",
            "https://i.imgur.com/6jTB0Cz.jpeg",
            "https://i.imgur.com/3LWLaSL.png",
            "https://i.imgur.com/6jTB0Cz.jpeg",
            "https://i.imgur.com/3LWLaSL.png",
            "https://i.imgur.com/6jTB0Cz.jpeg",
            "https://i.imgur.com/3LWLaSL.png",
            "https://i.imgur.com/6jTB0Cz.jpeg",
            "https://i.imgur.com/3LWLaSL.png",
            "https://i.imgur.com/6jTB0Cz.jpeg",
            "https://i.imgur.com/3LWLaSL.png",
            "https://i.imgur.com/6jTB0Cz.jpeg",
        ]
        GalleryContainerView(imageUrls: imageURLs)
    }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/GalleryHostView.swift
================
import SwiftUI

struct GalleryHostView: View {
    let imageUrls: [String]
    let schedulesLookup: (String) -> [SubredditSchedule]

    @State private var tappedImageUrl: String? = nil
    @State private var showDetailView = false

    var body: some View {
        NavigationStack {
            VStack(spacing: 0) {
                ImageGalleryCollectionView(imageIdentifiers: imageUrls) { index in
                    guard index >= 0 && index < imageUrls.count else { return }
                    let selectedUrl = imageUrls[index]
                    self.tappedImageUrl = selectedUrl
                    self.showDetailView = true
                }
            }
            .navigationTitle("Select Image")
            .navigationBarTitleDisplayMode(.inline)
            .navigationDestination(isPresented: $showDetailView) {
                if let url = tappedImageUrl {
                    DetailView(imageUrl: url, schedules: schedulesLookup(url))
                }
            }
        }
    }
}

struct GalleryHostView_Previews: PreviewProvider {
    static let sampleImageUrls = [
        "https://i.imgur.com/3LWLaSL.png",
        "https://i.imgur.com/6jTB0Cz.jpeg",
        "https://i.imgur.com/3LWLaSL.png",
        "https://i.imgur.com/6jTB0Cz.jpeg",
    ]

    static let sampleScheduleData: [String: [SubredditSchedule]] = [
        "https://i.imgur.com/3LWLaSL.png": [
            SubredditSchedule(subredditName: "r/Landscape", iconUrl: nil, scheduledDates: [ScheduledDate(date: Date()), ScheduledDate(date: Calendar.current.date(byAdding: .day, value: 5, to: Date())!)])
        ],
        "https://i.imgur.com/6jTB0Cz.jpeg": [
            SubredditSchedule(subredditName: "r/Portrait", iconUrl: nil, scheduledDates: [ScheduledDate(date: Calendar.current.date(byAdding: .hour, value: 8, to: Date())!)])
        ]
    ]

    static func previewSchedulesLookup(imageUrl: String) -> [SubredditSchedule] {
        return sampleScheduleData[imageUrl] ?? []
    }

    static var previews: some View {
        GalleryHostView(
            imageUrls: sampleImageUrls,
            schedulesLookup: previewSchedulesLookup
        )
        
        GalleryHostView(
            imageUrls: [sampleImageUrls[1], sampleImageUrls[0]],
            schedulesLookup: previewSchedulesLookup
        )
        .preferredColorScheme(.dark)
    }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/GlassView.swift
================
//
//  GradientView.swift
//  OnlyBoostiOS
//
//  Created by Niko Giraud on 3/24/25.
//  Copyright © 2025 orgName. All rights reserved.
//


import SwiftUI

struct GlassView: View {
    var body: some View {
        RoundedRectangle(cornerRadius: 8)
            .stroke(Color.white.opacity(0.15), lineWidth: 3)
            .fill(
                LinearGradient(
                    gradient: Gradient(colors: [
                        Color.white.opacity(0.1),
                        Color.white.opacity(0.02)
                    ]),
                    startPoint: .topLeading,
                    endPoint: .bottomTrailing
                )
            )
    }
}

#Preview {
    VStack {
        GlassView()
            .frame(width: 300, height: 200)
            .background(Color(.mainBackground))
        Text("Hello, World!")
            .frame(width: 300, height: 200)
            .background(Color(.mainBackground))
    }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/GuestFlowUpload.swift
================
//
//  GuestFlowUpload.swift
//  OnlyBoostiOS
//
//  Created by Niko Giraud on 3/21/25.
//  Copyright © 2025 orgName. All rights reserved.
//

import SwiftUI

struct GuestFlowUpload: View {
    var body: some View {
        Text(/*@START_MENU_TOKEN@*/"Hello, World!"/*@END_MENU_TOKEN@*/)
    }
}

#Preview {
    GuestFlowUpload()
}

================
File: OnlyBoostiOS/OnlyBoostiOS/ImageGalleryCell.swift
================
import UIKit

class ImageGalleryCell: UICollectionViewCell {
    static let reuseIdentifier = "ImageGalleryCell"

    private let imageView: UIImageView = {
        let iv = UIImageView()
        iv.contentMode = .scaleAspectFill
        iv.clipsToBounds = true
        iv.backgroundColor = .secondarySystemBackground
        iv.translatesAutoresizingMaskIntoConstraints = false
        return iv
    }()

    private var imageLoadTask: URLSessionDataTask?

    override init(frame: CGRect) {
        super.init(frame: frame)
        contentView.addSubview(imageView)
        NSLayoutConstraint.activate([
            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),
            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            imageView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)
        ])
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func prepareForReuse() {
        super.prepareForReuse()
        imageView.image = nil
        imageLoadTask?.cancel()
        imageLoadTask = nil
    }

    func configure(with identifier: String) {
        guard let url = URL(string: identifier) else {
            imageView.image = UIImage(systemName: "photo")
            return
        }

        imageLoadTask = URLSession.shared.dataTask(with: url) { [weak self] data, response, error in
            guard let self = self, self.identifierMatches(url.absoluteString) else { return }

            if let error = error {
                print("Error loading image: \(error.localizedDescription)")
                DispatchQueue.main.async {
                    self.imageView.image = UIImage(systemName: "exclamationmark.triangle")
                }
                return
            }

            guard let data = data, let image = UIImage(data: data) else {
                DispatchQueue.main.async {
                    self.imageView.image = UIImage(systemName: "questionmark.diamond")
                }
                return
            }

            DispatchQueue.main.async {
                self.imageView.image = image
            }
        }
        imageLoadTask?.resume()
    }

    private func identifierMatches(_ urlString: String) -> Bool {
        return true
    }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/ImageGalleryCollectionView.swift
================
import SwiftUI
import UIKit

struct ImageGalleryCollectionView: UIViewRepresentable {
    var imageIdentifiers: [String]
    var onTap: (Int) -> Void

    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }

    func makeUIView(context: Context) -> UICollectionView {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        let spacing: CGFloat = 5
        let totalSpacing = (3 - 1) * spacing
        let availableWidth = UIScreen.main.bounds.width - (2 * spacing) - totalSpacing
        let itemWidth = availableWidth / 3
        layout.itemSize = CGSize(width: itemWidth, height: itemWidth)
        layout.minimumInteritemSpacing = spacing
        layout.minimumLineSpacing = spacing

        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.backgroundColor = .clear
        collectionView.dataSource = context.coordinator
        collectionView.delegate = context.coordinator
        collectionView.register(ImageGalleryCell.self, forCellWithReuseIdentifier: ImageGalleryCell.reuseIdentifier)

        return collectionView
    }

    func updateUIView(_ uiView: UICollectionView, context: Context) {
        context.coordinator.parent = self
        uiView.reloadData()
    }

    class Coordinator: NSObject, UICollectionViewDataSource, UICollectionViewDelegate {
        var parent: ImageGalleryCollectionView

        init(_ parent: ImageGalleryCollectionView) {
            self.parent = parent
        }

        func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
            return parent.imageIdentifiers.count
        }

        func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ImageGalleryCell.reuseIdentifier, for: indexPath) as? ImageGalleryCell else {
                return UICollectionViewCell()
            }

            let identifier = parent.imageIdentifiers[indexPath.item]
            cell.configure(with: identifier)
            return cell
        }

        func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
            parent.onTap(indexPath.item)
        }
    }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/ImageLoader.swift
================
//
//  ImageLoader.swift
//  OnlyBoostiOS
//
//  Created by Niko Giraud on 3/20/25.
//  Copyright © 2025 orgName. All rights reserved.
//


import SwiftUI

class ImageLoader: ObservableObject {
    @Published var images: [UIImage?] = []
    private var urls: [String] = []
    
    init(urls: [String]) {
        self.urls = urls
        self.images = Array(repeating: nil, count: urls.count)
        loadImages()
    }
    
    private func loadImages() {
        for (index, urlString) in urls.enumerated() {
            guard let url = URL(string: urlString) else { continue }
            URLSession.shared.dataTask(with: url) { data, response, error in
                if let data = data, let image = UIImage(data: data) {
                    DispatchQueue.main.async {
                        self.images[index] = image
                    }
                }
            }.resume()
        }
    }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/Info.plist
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>$(DEVELOPMENT_LANGUAGE)</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$(PRODUCT_NAME)</string>
	<key>CFBundlePackageType</key>
	<string>$(PRODUCT_BUNDLE_PACKAGE_TYPE)</string>
	<key>CFBundleShortVersionString</key>
	<string>1.0</string>
	<key>CFBundleVersion</key>
	<string>1</string>
	<key>LSRequiresIPhoneOS</key>
	<true/>
	<key>UIApplicationSceneManifest</key>
	<dict>
		<key>UIApplicationSupportsMultipleScenes</key>
		<false/>
	</dict>
	<key>UILaunchScreen</key>
	<dict/>
	<key>UIRequiredDeviceCapabilities</key>
	<array>
		<string>armv7</string>
	</array>
	<key>UISupportedInterfaceOrientations</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>UISupportedInterfaceOrientations~ipad</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationPortraitUpsideDown</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>NSAppTransportSecurity</key>
	<dict>
		<key>NSAllowsArbitraryLoads</key>
		<true/>
	</dict>
	<key>UIAppFonts</key>
	<array>
		<string>FugazOne-Regular.ttf</string>
	</array>
</dict>
</plist>

================
File: OnlyBoostiOS/OnlyBoostiOS/iOSApp.swift
================
import SwiftUI

@main
struct iOSApp: App {
	var body: some Scene {
		WindowGroup {
			ContentView()
		}
	}
}

================
File: OnlyBoostiOS/OnlyBoostiOS/LoopingGradientView.swift
================
import SwiftUI

struct LoopingGradientView: View {
    // Define initial colors
    private let color1 = Color(red: 14/255, green: 165/255, blue: 233/255)  // Sky blue
    private let color2 = Color(red: 139/255, green: 92/255, blue: 246/255)  // Purple
    
    // State to animate the hue rotation angle
    @State private var hueAngle: Angle = .degrees(0)
    var isAnimating: Bool
    
    var body: some View {
        ZStack {
            // Base gradient
            LinearGradient(
                gradient: Gradient(colors: [color1, color2]),
                startPoint: .leading,
                endPoint: .trailing
            )
            // Apply hue rotation with animation
            .hueRotation(isAnimating ? hueAngle : .zero)
            .animation(
                Animation.linear(duration: 2) // 4 seconds for one full cycle
                    .repeatForever(autoreverses: true), // Loop forever in one direction
                value: hueAngle
            )
            .onAppear {
                // Start the animation by rotating to 60 degrees
                hueAngle = .degrees(60)
            }
        }
    }
}

#Preview {
    Button(action: {
        print("Pressed")
    }, label: {
        Text("Press me!")
    })
    .padding()
    .background(content: {
        LoopingGradientView(isAnimating: true)
    })
}

================
File: OnlyBoostiOS/OnlyBoostiOS/PreferenceKeys.swift
================
//
//  PreferenceKeys.swift
//  OnlyBoostiOS
//
//  Created by Niko Giraud on 3/19/25.
//  Copyright © 2025 OnlyBoostAI. All rights reserved.
//

import SwiftUI

struct SizePreferenceKey: PreferenceKey {
    static var defaultValue: CGSize = .zero
    static func reduce(value: inout CGSize, nextValue: () -> CGSize) {}
}

extension View {
    func readSize(onChange: @escaping (CGSize) -> Void) -> some View {
        background(
            GeometryReader { geometryProxy in
                Color.clear
                    .preference(key: SizePreferenceKey.self, value: geometryProxy.size)
            }
        )
        .onPreferenceChange(SizePreferenceKey.self, perform: onChange)
    }
}

================
File: OnlyBoostiOS/OnlyBoostiOS/SchedulePostsSheet.swift
================
//
//  SchedulePostsSheet.swift
//  OnlyBoostiOS
//
//  Created by Niko Giraud on 3/24/25.
//  Copyright © 2025 orgName. All rights reserved.
//

import SwiftUI

struct SchedulePostsSheet: View {
    @EnvironmentObject var viewModel: AppViewModel
    @Binding var isPresented: Bool
    
    // Non-optional @State variables with default values
    @State private var selectedInitialSpacing: String = "1H"
    @State private var selectedRepostScheduling: String = "3W"
    
    // Options for the segmented controls
    let initialSpacings = ["1H", "6H", "12H", "24H"]
    let repostSchedules = ["3W", "6W", "9W", "12W"]
    
    @State var initialSpacingIndex = 0
    @State var repostSchedulesIndex = 0
    
    let segmentedControlHeight: CGFloat = 35
    
    var body: some View {
        NavigationView {
            VStack(alignment: .leading) {
                // Initial Post Spacing Picker
                Text("Initial Post Spacing")
                    .font(.headline)
                    .foregroundStyle(.white)
                
                SegmentedControl(segments: initialSpacings,
                                 selectedIndex: $initialSpacingIndex)
                .frame(height: segmentedControlHeight)
                
                
                Spacer()
                    .frame(height: 20)
                
                // Repost Scheduling Picker
                Text("Repost Scheduling")
                    .font(.headline)
                    .foregroundStyle(.white)
                SegmentedControl(segments: repostSchedules,
                                 selectedIndex: $repostSchedulesIndex)
                .frame(height: segmentedControlHeight)
                
                Spacer()
                
                // Post button
                Button("Post") {
                    print("Selected: \(selectedInitialSpacing), \(selectedRepostScheduling)")
                    viewModel.showSheetStack = false // Dismiss all sheets
                    withAnimation {
                        viewModel.showSignUpPopup = true // Show the popup
                        isPresented = false // Dismiss the sheet
                    }
                }
                .padding()
                .frame(maxWidth: .infinity)
                .background {
                    LoopingGradientView(isAnimating: true)
                }
                .foregroundColor(.white)
                .cornerRadius(10)

            }
            .padding()
            .toolbar {
                ToolbarItem(placement: .topBarLeading) {
                    Text("Subreddits")
                        .foregroundColor(.white)
                        .font(.largeTitle)
                        .fontWeight(.bold)
                }
            }
            .background(
                Color(.mainBackground)
                    .overlay {
                        GlassView()
                    }
                    .ignoresSafeArea()
            )
        }

    }
}

#Preview {
    @Previewable @State var isPresented = true
    SchedulePostsSheet(isPresented: $isPresented)
}

================
File: OnlyBoostiOS/OnlyBoostiOS/SegmentedControl.swift
================
import SwiftUI

struct SegmentedControl: View {
    // Properties
    let segments: [String]
    @Binding var selectedIndex: Int
    let selectedBackgroundColor: Color
    let selectedTextColor: Color
    let unselectedTextColor: Color
    
    init(
        segments: [String],
        selectedIndex: Binding<Int>,
        selectedBackgroundColor: Color = .blue,
        selectedTextColor: Color = .white,
        unselectedTextColor: Color = .gray
    ) {
        self.segments = segments
        self._selectedIndex = selectedIndex
        self.selectedBackgroundColor = selectedBackgroundColor
        self.selectedTextColor = selectedTextColor
        self.unselectedTextColor = unselectedTextColor
    }
    
    var body: some View {
        GeometryReader { geometry in
            ZStack(alignment: .leading) {
                Capsule()
                    .fill(Color.gray.opacity(0.2))
                    .frame(width: geometry.size.width, height: geometry.size.height)
                
                Capsule()
                    .fill(selectedBackgroundColor)
                    .frame(width: geometry.size.width / CGFloat(segments.count))
                    .offset(x: CGFloat(selectedIndex) * (geometry.size.width / CGFloat(segments.count)), y: 0)
                    .animation(.default, value: selectedIndex) // Ensures animation in app
                
                HStack(spacing: 0) {
                    ForEach(0..<segments.count, id: \.self) { index in
                        Text(segments[index])
                            .foregroundColor(selectedIndex == index ? selectedTextColor : unselectedTextColor)
                            .frame(maxWidth: .infinity)
                            .contentShape(Rectangle())
                            .onTapGesture {
                                withAnimation {
                                    selectedIndex = index
                                }
                            }
                    }
                }
            }
        }
    }
}

#Preview {
    struct PreviewWrapper: View {
        @State private var selectedIndex = 1
        var body: some View {
            SegmentedControl(
                segments: ["First", "Second", "Third"],
                selectedIndex: $selectedIndex,
                selectedBackgroundColor: .green,
                selectedTextColor: .white,
                unselectedTextColor: .gray
            )
            .frame(width: 300, height: 50)
        }
    }
    return PreviewWrapper()
}

================
File: OnlyBoostiOS/OnlyBoostiOS/SignUpPopup.swift
================
//
//  SignUpPopup.swift
//  OnlyBoostiOS
//
//  Created by Niko Giraud on 3/22/25.
//  Copyright © 2025 orgName. All rights reserved.
//

import SwiftUI
import shared

struct SignUpPopup: View {
    private let networking = Networking() // Shared Networking instance
    @State var selectedProvider: Networking.Providers? = nil
    @State private var largestButtonWidth: CGFloat = 0
    @State private var alertMessage: String = ""
    let imageSize: CGFloat = 22.5
    
    var body: some View {
        VStack(spacing: 20) {
            Text("Sign Up")
                .font(.title)
                .fontWeight(.bold)
                .foregroundStyle(.white)
            
            createSignInButton(imageResource: .apple, provider: .apple, widthToMatch: largestButtonWidth)
            createSignInButton(imageResource: .google, provider: .google, widthToMatch: largestButtonWidth)
            createSignInButton(imageResource: .microsoft, provider: .microsoft)
        }
        .padding(20)
        .background(Color(.mainBackground))
        .cornerRadius(20)
        .shadow(radius: 10)
        .sheet(item: $selectedProvider) { provider in
            AuthorizationWebView(urlPath: Networking.Paths().authEntryPoint(provider: provider)) { sessionToken in
                print(sessionToken)
                selectedProvider = nil
            } loginFailed: { error in
                alertMessage = error ?? "An unexpected error occurred. Please try again!"
            }   
        }
        .alert("Login Failed",
               isPresented: Binding(get: {
                    return !alertMessage.isEmpty
                }, set: { _ in
                    return
                }))
                {
                    Button("OK", action: {})
                } message: {
                    Text(alertMessage)
                }

    }
    
    func createSignInButton(imageResource: ImageResource,
                            provider: Networking.Providers,
                            widthToMatch: CGFloat? = nil
    ) -> some View {
        let providerName = provider.name.capitalized
        let authUrl = Networking.Paths().authEntryPoint(provider: provider)

        func buttonHStack(imageResource: ImageResource, providerName: String) -> some View {
            return HStack {
                Image(imageResource)
                    .resizable()
                    .frame(width: 30, height: 30)
                Text("Sign In with \(providerName)")
                    .foregroundStyle(.black)
            }
        }
        
        return Button {
            selectedProvider = provider
            print("Auth URL for \(providerName): \(authUrl)") // Log the URL
        } label: {
            if let widthToMatch = widthToMatch, widthToMatch != .zero {
                buttonHStack(imageResource: imageResource, providerName: providerName)
                    .frame(width: largestButtonWidth, alignment: .leading)
            } else {
                buttonHStack(imageResource: imageResource, providerName: providerName)
                    .readSize { newSize in
                        if provider == .microsoft { // Use enum comparison
                            largestButtonWidth = newSize.width
                        }
                    }
            }
        }
        .buttonStyle(.borderedProminent)
        .tint(.white)
    }
}

#Preview {
    return SignUpPopup()
}

================
File: OnlyBoostiOS/OnlyBoostiOS/SubredditsSheet.swift
================
//
//  SubredditsSheet.swift
//  OnlyBoostiOS
//
//  Created by Niko Giraud on 3/24/25.
//  Copyright © 2025 orgName. All rights reserved.
//

import SwiftUI

struct SubredditsSheet: View {
    @Binding var isPresented: Bool
    @State private var subreddits: [String] = ["/r/bikinis", "/r/ebony"]
    @State private var newSubreddit: String = ""
    @State private var showingSchedulePostsSheet = false

    var body: some View {
        NavigationView {
            VStack(alignment: .leading) {
                // Subreddit list in a scrollable grid
                ScrollView {
                    LazyVGrid(columns: [GridItem(.adaptive(minimum: 100))], spacing: 10) {
                        ForEach(subreddits, id: \.self) { subreddit in
                            Text(subreddit)
                                .padding()
                                .background(Color.blue)
                                .foregroundStyle(.white)
                                .fontWeight(.semibold)
                                .cornerRadius(5)
                        }
                    }
                }

                // Prompt for adding new subreddits
                Text("Did we miss any?")
                    .foregroundStyle(.white)
                    .font(.headline)
                    .padding(.top)

                TextField("",
                          text: $newSubreddit,
                          prompt: Text("Add new subreddit").foregroundStyle(.gray))
                    .padding(10)
                    .foregroundStyle(.white)
                    .background(
                        RoundedRectangle(cornerRadius: 10)
                            .stroke(Color.gray, lineWidth: 1)
                    )
                
                Spacer()
                    .frame(height: 20)
                
                // Button to proceed to scheduling
                Button("Continue") {
                    showingSchedulePostsSheet = true
                }
                .font(.headline)
                .padding()
                .frame(maxWidth: .infinity)
                .background {
                    LoopingGradientView(isAnimating: true)
                }
                .foregroundColor(.white)
                .cornerRadius(10)

                Spacer()
                    .frame(height: 20)
            }
            .padding()
            .toolbar {
                ToolbarItem(placement: .topBarLeading) {
                    Text("Subreddits")
                        .foregroundColor(.white)
                        .font(.largeTitle)
                        .fontWeight(.bold)
                }
            }
            .background(
                Color(.mainBackground)
                    .overlay {
                        GlassView()
                    }
                    .ignoresSafeArea()
            )
        }
        // Presents the SchedulePostsSheet as a half-sheet
        .sheet(isPresented: $showingSchedulePostsSheet) {
            SchedulePostsSheet(isPresented: $showingSchedulePostsSheet)
                .presentationDetents([.medium])
        }
    }
}

#Preview {
    @Previewable @State var isPresented = true
    SubredditsSheet(isPresented: $isPresented)
}

================
File: OnlyBoostiOS/OnlyBoostiOS/TestAsync.swift
================
//
//  TestAsync.swift
//  OnlyBoostiOS
//
//  Created by Niko Giraud on 3/20/25.
//  Copyright © 2025 orgName. All rights reserved.
//

import SwiftUI

struct TestAsync: View {
    var body: some View {
        AsyncImage(url: URL(string: "https://i.imgur.com/XyvrE7X.png"))
    }
}

#Preview {
    TestAsync()
}

================
File: OnlyBoostiOS/OnlyBoostiOS/UploadPhoto.swift
================
import SwiftUI
import PhotosUI
import UniformTypeIdentifiers
import shared

class AppViewModel: ObservableObject {
    @Published var showSignUpPopup = false
    @Published var showSheetStack = false // Controls the entire sheet stack
}

struct UploadPhoto: View {
    @State private var selectedImage: UIImage? = nil
    @State private var showingOptions = false
    @State private var showingPhotoPicker = false
    @State private var showingFilePicker = false
    @State private var showingSubredditsSheet = false
    @StateObject private var viewModel = AppViewModel()
    private let networking = Networking() // Shared Networking instance
    @State var selectedProvider: Networking.Providers? = nil

    var body: some View {
        GeometryReader { geometry in
            ZStack {
                // Image area with border
                ZStack {
                    if let image = selectedImage {
                        Image(uiImage: image)
                            .resizable()
                            .scaledToFit()
                    }
                }
                .frame(width: geometry.size.width - 20, height: geometry.size.height - 20)
                .overlay(
                    GlassView()
                )

                // Cancel button in the top-right corner
                if selectedImage != nil {
                    VStack {
                        HStack {
                            Spacer()
                            Button(action: {
                                selectedImage = nil
                            }) {
                                Image(systemName: "xmark.circle.fill")
                                    .resizable()
                                    .frame(width: 30, height: 30)
                                    .foregroundColor(.red)
                            }
                            .padding()
                        }
                        Spacer()
                    }
                }

                // Upload button centered in the view
                if selectedImage == nil {
                    VStack {
                        Spacer()
                        Button("Upload Photo") {
                            showingOptions = true
                        }
                        .font(.headline)
                        .padding()
                        .frame(maxWidth: .infinity)
                        .background(content: {
                            LoopingGradientView(isAnimating: true)
                        })
                        .foregroundColor(.white)
                        .cornerRadius(10)
                        .confirmationDialog("Select Source", isPresented: $showingOptions) {
                            Button("Photo Library") {
                                showingPhotoPicker = true
                            }
                            Button("Files") {
                                showingFilePicker = true
                            }
                            Button("Cancel", role: .cancel) {}
                        }
                    }
                } else {
                    VStack {
                        Spacer()
                        Button("Show Captions") {
                            showingSubredditsSheet = true
                        }
                        .font(.headline)
                        .padding()
                        .frame(maxWidth: .infinity)
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                        .padding(.bottom, 20) // Extra padding from the bottom edge
                    }
                }
                
                // Popup overlay
                if viewModel.showSignUpPopup {
                    // Dimmed background
                    Color.black.opacity(0.4)
                        .edgesIgnoringSafeArea(.all)
                        .onTapGesture {
                            withAnimation {
                                viewModel.showSignUpPopup = false
                            }
                        }
                    // Popup content
                    SignUpPopup()
                        .transition(.scale) // Animation for popup
                }
            }
            .padding(10) // Padding around the entire content
            .background(Color(.mainBackground))
        }
        .sheet(isPresented: $viewModel.showSheetStack, content: {
            DescriptionSheet()
                .presentationDetents([.medium])
        })
        .sheet(isPresented: $showingPhotoPicker) {
            PhotoPicker(image: $selectedImage, isPresented: $showingPhotoPicker)
        }
        .sheet(isPresented: $showingFilePicker) {
            FilePicker(image: $selectedImage, isPresented: $showingFilePicker)
        }
        .onChange(of: selectedImage) { _, newImage in
            if newImage != nil {
                viewModel.showSheetStack = true
            }
        }
        .sheet(item: $selectedProvider) {
            selectedProvider = nil
        } content: { selectedProvider in
            AuthorizationWebView(urlPath: Networking.Paths().authEntryPoint(provider: selectedProvider)) { sessionToken in
                print("ToDO: save token in keychain:", sessionToken)
            } loginFailed: { failed in
                print("Login failed!: \(failed)")
            }
        }
        .environmentObject(viewModel)
    }
}

// Assuming these are your existing PhotoPicker and FilePicker implementations
struct PhotoPicker: UIViewControllerRepresentable {
    @Binding var image: UIImage?
    @Binding var isPresented: Bool

    func makeUIViewController(context: Context) -> PHPickerViewController {
        var config = PHPickerConfiguration()
        config.filter = .images
        let picker = PHPickerViewController(configuration: config)
        picker.delegate = context.coordinator
        return picker
    }

    func updateUIViewController(_ uiViewController: PHPickerViewController, context: Context) {}

    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }

    class Coordinator: NSObject, PHPickerViewControllerDelegate {
        let parent: PhotoPicker

        init(_ parent: PhotoPicker) {
            self.parent = parent
        }

        func picker(_ picker: PHPickerViewController, didFinishPicking results: [PHPickerResult]) {
            parent.isPresented = false
            if let itemProvider = results.first?.itemProvider, itemProvider.canLoadObject(ofClass: UIImage.self) {
                itemProvider.loadObject(ofClass: UIImage.self) { image, _ in
                    DispatchQueue.main.async {
                        self.parent.image = image as? UIImage
                    }
                }
            }
        }
    }
}

struct FilePicker: UIViewControllerRepresentable {
    @Binding var image: UIImage?
    @Binding var isPresented: Bool

    func makeUIViewController(context: Context) -> UIDocumentPickerViewController {
        let picker = UIDocumentPickerViewController(forOpeningContentTypes: [UTType.image])
        picker.delegate = context.coordinator
        return picker
    }

    func updateUIViewController(_ uiViewController: UIDocumentPickerViewController, context: Context) {}

    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }

    class Coordinator: NSObject, UIDocumentPickerDelegate {
        let parent: FilePicker

        init(_ parent: FilePicker) {
            self.parent = parent
        }

        func documentPicker(_ controller: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
            parent.isPresented = false
            if let url = urls.first, let image = UIImage(contentsOfFile: url.path) {
                DispatchQueue.main.async {
                    self.parent.image = image
                }
            }
        }

        func documentPickerWasCancelled(_ controller: UIDocumentPickerViewController) {
            parent.isPresented = false
        }
    }
}

#Preview {
    UploadPhoto()
}

extension Networking.Providers: @retroactive Identifiable {
    public var id: String {
        switch self {
        case .google: return "google"
        case .microsoft: return "microsoft"
        case .apple: return "apple"
        default: return "unknown" // Handle exhaustiveness
        }
    }
}

================
File: OnlyBoostiOS/OnlyBoostiOS.xcodeproj/project.xcworkspace/contents.xcworkspacedata
================
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "self:">
   </FileRef>
</Workspace>

================
File: OnlyBoostiOS/OnlyBoostiOS.xcodeproj/xcshareddata/xcschemes/OnlyBoostiOS.xcscheme
================
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1600"
   version = "1.7">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES"
      buildArchitectures = "Automatic">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "7555FF7A242A565900829871"
               BuildableName = "OnlyBoostiOS.app"
               BlueprintName = "OnlyBoostiOS"
               ReferencedContainer = "container:OnlyBoostiOS.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES"
      shouldAutocreateTestPlan = "YES">
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "7555FF7A242A565900829871"
            BuildableName = "OnlyBoostiOS.app"
            BlueprintName = "OnlyBoostiOS"
            ReferencedContainer = "container:OnlyBoostiOS.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Release"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "7555FF7A242A565900829871"
            BuildableName = "OnlyBoostiOS.app"
            BlueprintName = "OnlyBoostiOS"
            ReferencedContainer = "container:OnlyBoostiOS.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>

================
File: OnlyBoostiOS/OnlyBoostiOS.xcodeproj/project.pbxproj
================
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 70;
	objects = {

/* Begin PBXBuildFile section */
		058557BB273AAA24004C7B11 /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 058557BA273AAA24004C7B11 /* Assets.xcassets */; };
		058557D9273AAEEB004C7B11 /* Preview Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 058557D8273AAEEB004C7B11 /* Preview Assets.xcassets */; };
		2152FB042600AC8F00CF470E /* iOSApp.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2152FB032600AC8F00CF470E /* iOSApp.swift */; };
		230036762D8B36DD005D9545 /* PreferenceKeys.swift in Sources */ = {isa = PBXBuildFile; fileRef = 230036752D8B36D8005D9545 /* PreferenceKeys.swift */; };
		2300367A2D8B4566005D9545 /* AuthorizationWebView.swift in Sources */ = {isa = PBXBuildFile; fileRef = 230036792D8B4566005D9545 /* AuthorizationWebView.swift */; };
		236AD51E2D9D321300AA6671 /* ImageGalleryCell.swift in Sources */ = {isa = PBXBuildFile; fileRef = 236AD51C2D9D321300AA6671 /* ImageGalleryCell.swift */; };
		236AD51F2D9D321300AA6671 /* ImageGalleryCollectionView.swift in Sources */ = {isa = PBXBuildFile; fileRef = 236AD51D2D9D321300AA6671 /* ImageGalleryCollectionView.swift */; };
		236AD5212D9D321900AA6671 /* GalleryContainerView.swift in Sources */ = {isa = PBXBuildFile; fileRef = 236AD5202D9D321900AA6671 /* GalleryContainerView.swift */; };
		23DF73912D8CD65A0065DF59 /* CarouselView.swift in Sources */ = {isa = PBXBuildFile; fileRef = 23DF73902D8CD65A0065DF59 /* CarouselView.swift */; };
		23DF73932D8CE5EB0065DF59 /* ImageLoader.swift in Sources */ = {isa = PBXBuildFile; fileRef = 23DF73922D8CE5EB0065DF59 /* ImageLoader.swift */; };
		23DF73952D8CEB0F0065DF59 /* TestAsync.swift in Sources */ = {isa = PBXBuildFile; fileRef = 23DF73942D8CEB040065DF59 /* TestAsync.swift */; };
		23DF739D2D8E1EF90065DF59 /* AnimatedButton.swift in Sources */ = {isa = PBXBuildFile; fileRef = 23DF739C2D8E1EF90065DF59 /* AnimatedButton.swift */; };
		23DF739F2D8E21120065DF59 /* GuestFlowUpload.swift in Sources */ = {isa = PBXBuildFile; fileRef = 23DF739E2D8E21120065DF59 /* GuestFlowUpload.swift */; };
		23DF73A12D8E2CE00065DF59 /* UploadPhoto.swift in Sources */ = {isa = PBXBuildFile; fileRef = 23DF73A02D8E2CE00065DF59 /* UploadPhoto.swift */; };
		23DF73A32D8E71640065DF59 /* SignUpPopup.swift in Sources */ = {isa = PBXBuildFile; fileRef = 23DF73A22D8E71640065DF59 /* SignUpPopup.swift */; };
		23EC9DC02D91255A00D76109 /* GlassView.swift in Sources */ = {isa = PBXBuildFile; fileRef = 23EC9DBF2D91255A00D76109 /* GlassView.swift */; };
		23EC9DC62D912E7E00D76109 /* LoopingGradientView.swift in Sources */ = {isa = PBXBuildFile; fileRef = 23EC9DC52D912E7E00D76109 /* LoopingGradientView.swift */; };
		23EC9DC82D9137D800D76109 /* DescriptionSheet.swift in Sources */ = {isa = PBXBuildFile; fileRef = 23EC9DC72D9137D800D76109 /* DescriptionSheet.swift */; };
		23EC9DCA2D9137F800D76109 /* SubredditsSheet.swift in Sources */ = {isa = PBXBuildFile; fileRef = 23EC9DC92D9137F800D76109 /* SubredditsSheet.swift */; };
		23EC9DCC2D9148E400D76109 /* SchedulePostsSheet.swift in Sources */ = {isa = PBXBuildFile; fileRef = 23EC9DCB2D9148E400D76109 /* SchedulePostsSheet.swift */; };
		23EC9DCE2D91523900D76109 /* SegmentedControl.swift in Sources */ = {isa = PBXBuildFile; fileRef = 23EC9DCD2D91523900D76109 /* SegmentedControl.swift */; };
		7555FF83242A565900829871 /* ContentView.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7555FF82242A565900829871 /* ContentView.swift */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		7555FFB4242A642300829871 /* Embed Frameworks */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = "";
			dstSubfolderSpec = 10;
			files = (
			);
			name = "Embed Frameworks";
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		058557BA273AAA24004C7B11 /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = "<group>"; };
		058557D8273AAEEB004C7B11 /* Preview Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = "Preview Assets.xcassets"; sourceTree = "<group>"; };
		2152FB032600AC8F00CF470E /* iOSApp.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = iOSApp.swift; sourceTree = "<group>"; };
		230036752D8B36D8005D9545 /* PreferenceKeys.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = PreferenceKeys.swift; sourceTree = "<group>"; };
		230036792D8B4566005D9545 /* AuthorizationWebView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = AuthorizationWebView.swift; sourceTree = "<group>"; };
		236AD51C2D9D321300AA6671 /* ImageGalleryCell.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ImageGalleryCell.swift; sourceTree = "<group>"; };
		236AD51D2D9D321300AA6671 /* ImageGalleryCollectionView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ImageGalleryCollectionView.swift; sourceTree = "<group>"; };
		236AD5202D9D321900AA6671 /* GalleryContainerView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = GalleryContainerView.swift; sourceTree = "<group>"; };
		23DF73902D8CD65A0065DF59 /* CarouselView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = CarouselView.swift; sourceTree = "<group>"; };
		23DF73922D8CE5EB0065DF59 /* ImageLoader.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ImageLoader.swift; sourceTree = "<group>"; };
		23DF73942D8CEB040065DF59 /* TestAsync.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = TestAsync.swift; sourceTree = "<group>"; };
		23DF739C2D8E1EF90065DF59 /* AnimatedButton.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = AnimatedButton.swift; sourceTree = "<group>"; };
		23DF739E2D8E21120065DF59 /* GuestFlowUpload.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = GuestFlowUpload.swift; sourceTree = "<group>"; };
		23DF73A02D8E2CE00065DF59 /* UploadPhoto.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = UploadPhoto.swift; sourceTree = "<group>"; };
		23DF73A22D8E71640065DF59 /* SignUpPopup.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = SignUpPopup.swift; sourceTree = "<group>"; };
		23EC9DBF2D91255A00D76109 /* GlassView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = GlassView.swift; sourceTree = "<group>"; };
		23EC9DC52D912E7E00D76109 /* LoopingGradientView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = LoopingGradientView.swift; sourceTree = "<group>"; };
		23EC9DC72D9137D800D76109 /* DescriptionSheet.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DescriptionSheet.swift; sourceTree = "<group>"; };
		23EC9DC92D9137F800D76109 /* SubredditsSheet.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = SubredditsSheet.swift; sourceTree = "<group>"; };
		23EC9DCB2D9148E400D76109 /* SchedulePostsSheet.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = SchedulePostsSheet.swift; sourceTree = "<group>"; };
		23EC9DCD2D91523900D76109 /* SegmentedControl.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = SegmentedControl.swift; sourceTree = "<group>"; };
		7555FF7B242A565900829871 /* OnlyBoostiOS.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = OnlyBoostiOS.app; sourceTree = BUILT_PRODUCTS_DIR; };
		7555FF82242A565900829871 /* ContentView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ContentView.swift; sourceTree = "<group>"; };
		7555FF8C242A565B00829871 /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFileSystemSynchronizedRootGroup section */
		23DF73882D8B8DBE0065DF59 /* Assets */ = {isa = PBXFileSystemSynchronizedRootGroup; explicitFileTypes = {}; explicitFolders = (); path = Assets; sourceTree = "<group>"; };
/* End PBXFileSystemSynchronizedRootGroup section */

/* Begin PBXFrameworksBuildPhase section */
		7555FF78242A565900829871 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		058557D7273AAEEB004C7B11 /* Preview Content */ = {
			isa = PBXGroup;
			children = (
				058557D8273AAEEB004C7B11 /* Preview Assets.xcassets */,
			);
			path = "Preview Content";
			sourceTree = "<group>";
		};
		7555FF72242A565900829871 = {
			isa = PBXGroup;
			children = (
				7555FF7D242A565900829871 /* OnlyBoostiOS */,
				7555FF7C242A565900829871 /* Products */,
				7555FFB0242A642200829871 /* Frameworks */,
			);
			sourceTree = "<group>";
		};
		7555FF7C242A565900829871 /* Products */ = {
			isa = PBXGroup;
			children = (
				7555FF7B242A565900829871 /* OnlyBoostiOS.app */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		7555FF7D242A565900829871 /* OnlyBoostiOS */ = {
			isa = PBXGroup;
			children = (
				23EC9DCD2D91523900D76109 /* SegmentedControl.swift */,
				23EC9DCB2D9148E400D76109 /* SchedulePostsSheet.swift */,
				23EC9DC92D9137F800D76109 /* SubredditsSheet.swift */,
				23EC9DC72D9137D800D76109 /* DescriptionSheet.swift */,
				23EC9DC52D912E7E00D76109 /* LoopingGradientView.swift */,
				23EC9DBF2D91255A00D76109 /* GlassView.swift */,
				23DF73A22D8E71640065DF59 /* SignUpPopup.swift */,
				23DF73A02D8E2CE00065DF59 /* UploadPhoto.swift */,
				23DF739C2D8E1EF90065DF59 /* AnimatedButton.swift */,
				23DF73942D8CEB040065DF59 /* TestAsync.swift */,
				236AD51C2D9D321300AA6671 /* ImageGalleryCell.swift */,
				236AD51D2D9D321300AA6671 /* ImageGalleryCollectionView.swift */,
				236AD5202D9D321900AA6671 /* GalleryContainerView.swift */,
				23DF73922D8CE5EB0065DF59 /* ImageLoader.swift */,
				23DF73902D8CD65A0065DF59 /* CarouselView.swift */,
				23DF73882D8B8DBE0065DF59 /* Assets */,
				230036792D8B4566005D9545 /* AuthorizationWebView.swift */,
				230036752D8B36D8005D9545 /* PreferenceKeys.swift */,
				058557BA273AAA24004C7B11 /* Assets.xcassets */,
				7555FF82242A565900829871 /* ContentView.swift */,
				7555FF8C242A565B00829871 /* Info.plist */,
				2152FB032600AC8F00CF470E /* iOSApp.swift */,
				058557D7273AAEEB004C7B11 /* Preview Content */,
				23DF739E2D8E21120065DF59 /* GuestFlowUpload.swift */,
			);
			path = OnlyBoostiOS;
			sourceTree = "<group>";
		};
		7555FFB0242A642200829871 /* Frameworks */ = {
			isa = PBXGroup;
			children = (
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		7555FF7A242A565900829871 /* OnlyBoostiOS */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 7555FFA5242A565B00829871 /* Build configuration list for PBXNativeTarget "OnlyBoostiOS" */;
			buildPhases = (
				7555FFB5242A651A00829871 /* ShellScript */,
				7555FF77242A565900829871 /* Sources */,
				7555FF78242A565900829871 /* Frameworks */,
				7555FF79242A565900829871 /* Resources */,
				7555FFB4242A642300829871 /* Embed Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
			);
			fileSystemSynchronizedGroups = (
				23DF73882D8B8DBE0065DF59 /* Assets */,
			);
			name = OnlyBoostiOS;
			productName = OnlyBoostiOS;
			productReference = 7555FF7B242A565900829871 /* OnlyBoostiOS.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		7555FF73242A565900829871 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastSwiftUpdateCheck = 1130;
				LastUpgradeCheck = 1130;
				ORGANIZATIONNAME = orgName;
				TargetAttributes = {
					7555FF7A242A565900829871 = {
						CreatedOnToolsVersion = 11.3.1;
					};
				};
			};
			buildConfigurationList = 7555FF76242A565900829871 /* Build configuration list for PBXProject "OnlyBoostiOS" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 7555FF72242A565900829871;
			productRefGroup = 7555FF7C242A565900829871 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				7555FF7A242A565900829871 /* OnlyBoostiOS */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		7555FF79242A565900829871 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				058557D9273AAEEB004C7B11 /* Preview Assets.xcassets in Resources */,
				058557BB273AAA24004C7B11 /* Assets.xcassets in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		7555FFB5242A651A00829871 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
			);
			outputFileListPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "cd \"$SRCROOT/..\"\n./gradlew :shared:embedAndSignAppleFrameworkForXcode\n";
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		7555FF77242A565900829871 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				23DF73912D8CD65A0065DF59 /* CarouselView.swift in Sources */,
				2152FB042600AC8F00CF470E /* iOSApp.swift in Sources */,
				23EC9DCC2D9148E400D76109 /* SchedulePostsSheet.swift in Sources */,
				23EC9DC02D91255A00D76109 /* GlassView.swift in Sources */,
				23DF73932D8CE5EB0065DF59 /* ImageLoader.swift in Sources */,
				230036762D8B36DD005D9545 /* PreferenceKeys.swift in Sources */,
				23EC9DC62D912E7E00D76109 /* LoopingGradientView.swift in Sources */,
				23DF73952D8CEB0F0065DF59 /* TestAsync.swift in Sources */,
				236AD51E2D9D321300AA6671 /* ImageGalleryCell.swift in Sources */,
				236AD51F2D9D321300AA6671 /* ImageGalleryCollectionView.swift in Sources */,
				23DF73A12D8E2CE00065DF59 /* UploadPhoto.swift in Sources */,
				23EC9DCE2D91523900D76109 /* SegmentedControl.swift in Sources */,
				7555FF83242A565900829871 /* ContentView.swift in Sources */,
				23DF739F2D8E21120065DF59 /* GuestFlowUpload.swift in Sources */,
				23DF73A32D8E71640065DF59 /* SignUpPopup.swift in Sources */,
				23DF739D2D8E1EF90065DF59 /* AnimatedButton.swift in Sources */,
				23EC9DC82D9137D800D76109 /* DescriptionSheet.swift in Sources */,
				2300367A2D8B4566005D9545 /* AuthorizationWebView.swift in Sources */,
				23EC9DCA2D9137F800D76109 /* SubredditsSheet.swift in Sources */,
				236AD5212D9D321900AA6671 /* GalleryContainerView.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		7555FFA3242A565B00829871 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 14.1;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		7555FFA4242A565B00829871 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 14.1;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = iphoneos;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		7555FFA6242A565B00829871 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_ASSET_PATHS = "\"OnlyBoostiOS/Preview Content\"";
				DEVELOPMENT_TEAM = 338SXTLBRV;
				ENABLE_PREVIEWS = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(SRCROOT)/../shared/build/xcode-frameworks/$(CONFIGURATION)/$(SDK_NAME)",
				);
				INFOPLIST_FILE = OnlyBoostiOS/Info.plist;
				IPHONEOS_DEPLOYMENT_TARGET = 17.6;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				OTHER_LDFLAGS = (
					"$(inherited)",
					"-framework",
					shared,
				);
				PRODUCT_BUNDLE_IDENTIFIER = com.onlyboost.OnlyBoostiOS;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Debug;
		};
		7555FFA7242A565B00829871 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_ASSET_PATHS = "\"OnlyBoostiOS/Preview Content\"";
				DEVELOPMENT_TEAM = 338SXTLBRV;
				ENABLE_PREVIEWS = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(SRCROOT)/../shared/build/xcode-frameworks/$(CONFIGURATION)/$(SDK_NAME)",
				);
				INFOPLIST_FILE = OnlyBoostiOS/Info.plist;
				IPHONEOS_DEPLOYMENT_TARGET = 17.6;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				OTHER_LDFLAGS = (
					"$(inherited)",
					"-framework",
					shared,
				);
				PRODUCT_BUNDLE_IDENTIFIER = com.onlyboost.OnlyBoostiOS;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		7555FF76242A565900829871 /* Build configuration list for PBXProject "OnlyBoostiOS" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				7555FFA3242A565B00829871 /* Debug */,
				7555FFA4242A565B00829871 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		7555FFA5242A565B00829871 /* Build configuration list for PBXNativeTarget "OnlyBoostiOS" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				7555FFA6242A565B00829871 /* Debug */,
				7555FFA7242A565B00829871 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 7555FF73242A565900829871 /* Project object */;
}

================
File: shared/src/androidMain/kotlin/com/onlyboost/onlyboost/Platform.android.kt
================
package com.onlyboost.onlyboost

class AndroidPlatform : Platform {
    override val name: String = "Android ${android.os.Build.VERSION.SDK_INT}"
}

actual fun getPlatform(): Platform = AndroidPlatform()

================
File: shared/src/commonMain/kotlin/com/onlyboost/onlyboost/EnvironmentConfiguration.kt
================
package com.onlyboost.onlyboost

object EnvironmentConfiguration {
    enum class Types {
        dev, prod
    }

    val environmentType = EnvironmentConfiguration.Types.dev
    val host = "http://192.168.1.151"
    var callbackOrigin = "http://localhost:3149"
    val apiOrigin = "$host:3149"
    val frontendHost = "$host:8080"
}

================
File: shared/src/commonMain/kotlin/com/onlyboost/onlyboost/Greeting.kt
================
package com.onlyboost.onlyboost

import io.ktor.client.*
import io.ktor.client.request.*
import io.ktor.client.statement.*

class Greeting {
    private val platform: Platform = getPlatform()
    private val client = HttpClient()

    suspend fun greet(): String {
        val response = client.get("https://ktor.io/docs/")
        return response.bodyAsText()
    }
}

================
File: shared/src/commonMain/kotlin/com/onlyboost/onlyboost/Networking.kt
================
package com.onlyboost.onlyboost

import com.onlyboost.onlyboost.EnvironmentConfiguration.host

class Networking {
    enum class Providers {
        google,
        microsoft,
        apple
    }

    object Paths {
        fun authEntryPoint(provider: Networking.Providers): String {
            return "${EnvironmentConfiguration.apiOrigin}/auth/$provider"
        }

        fun notFound(): String {
            return "${EnvironmentConfiguration.frontendHost}/notFound"
        }

        fun authorizationSuccessStart(): String {
            return "${EnvironmentConfiguration.frontendHost}/auth/login/success?sessionToken"
        }

        fun authorizationFailureStart(): String {
            return "${EnvironmentConfiguration.frontendHost}/auth/login/failure"
        }
    }
}

================
File: shared/src/commonMain/kotlin/com/onlyboost/onlyboost/Platform.kt
================
package com.onlyboost.onlyboost

interface Platform {
    val name: String
}

expect fun getPlatform(): Platform

================
File: shared/src/iosMain/kotlin/com/onlyboost/onlyboost/Platform.ios.kt
================
package com.onlyboost.onlyboost

import platform.UIKit.UIDevice

class IOSPlatform: Platform {
    override val name: String = UIDevice.currentDevice.systemName() + " " + UIDevice.currentDevice.systemVersion
}

actual fun getPlatform(): Platform = IOSPlatform()

================
File: shared/build.gradle.kts
================
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    alias(libs.plugins.kotlinMultiplatform)
    alias(libs.plugins.androidLibrary)
}

kotlin {
    androidTarget {
        compilations.all {
            compileTaskProvider.configure {
                compilerOptions {
                    jvmTarget.set(JvmTarget.JVM_1_8)
                }
            }
        }
    }
    
    listOf(
        iosX64(),
        iosArm64(),
        iosSimulatorArm64()
    ).forEach {
        it.binaries.framework {
            baseName = "shared"
            isStatic = true
        }
    }

    sourceSets {
        commonMain.dependencies {
            implementation(libs.kotlin.test)
            implementation(libs.ktor.client.core)
            implementation(libs.kotlinx.coroutines.core)
        }
        androidMain.dependencies {
            implementation(libs.ktor.client.okhttp)
        }
        iosMain.dependencies {
            implementation(libs.ktor.client.darwin)
        }
    }
}

android {
    namespace = "com.onlyboost.onlyboost"
    compileSdk = 35
    defaultConfig {
        minSdk = 33
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

================
File: .gitignore
================
*.iml
.gradle
.idea
.DS_Store
build
captures
.externalNativeBuild
.cxx
local.properties
xcuserdata

================
File: build.gradle.kts
================
plugins {
    //trick: for the same plugin versions in all sub-modules
    alias(libs.plugins.androidApplication).apply(false)
    alias(libs.plugins.androidLibrary).apply(false)
    alias(libs.plugins.kotlinAndroid).apply(false)
    alias(libs.plugins.kotlinMultiplatform).apply(false)
    alias(libs.plugins.compose.compiler).apply(false)
}

================
File: gradle.properties
================
#Gradle
org.gradle.jvmargs=-Xmx2048M -Dfile.encoding=UTF-8 -Dkotlin.daemon.jvm.options\="-Xmx2048M"
org.gradle.caching=true
org.gradle.configuration-cache=true

#Kotlin
kotlin.code.style=official

#Android
android.useAndroidX=true
android.nonTransitiveRClass=true

================
File: gradlew
================
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"

================
File: gradlew.bat
================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

================
File: settings.gradle.kts
================
enableFeaturePreview("TYPESAFE_PROJECT_ACCESSORS")
pluginManagement {
    repositories {
        google()
        gradlePluginPortal()
        mavenCentral()
    }
}

dependencyResolutionManagement {
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "OnlyBoost"
include(":OnlyBoostAndroid")
include(":shared")
